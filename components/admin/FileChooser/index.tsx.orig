<<<<<<< HEAD
import { motion } from "framer-motion";
import { useState } from "react";
import useSWR from "swr";
import { API_BASE } from "../../../helpers";

type FileChooserProps = {
    selectedAction: (urls: string[]) => void,
    staticFetchPath: string,
}

type ImagesApiResponse = {
    ok: boolean,
    images: {
        md5: string,
        name: string,
        url: string,
        __v: number,
        _id: string,
    }[],
}

const FileChooser: React.FC<FileChooserProps> = ({ selectedAction, staticFetchPath }) => {
    const { data, mutate, isValidating, error } = useSWR<ImagesApiResponse, any>(API_BASE + staticFetchPath);
    const loading = (!data && !error) || isValidating;
    console.log(data);
    if (data) data.images = !loading ? ([...Array(120).keys()].map(_ => data.images[0])) : [];
    return (
        <>
            <motion.div
                className="chooser_wrapper"
                style={{ paddingLeft: 75, display: 'flex', width: '100%', flexWrap: 'wrap' }}
            >
                {
                    !loading &&
                    data.images.map(i => (
                        <motion.div 
                            key={i.name}
                            style={{
                                width: 50,
                                height: 50,
                                background: `url(${API_BASE}/${i.url}) no-repeat`,
                                backgroundSize: 'cover',
                                backgroundPosition: 'center',
                            }}
                            className="m-2"
                        >

                        </motion.div>
                    ))
                }
            </motion.div>
=======
import { useState, useEffect, CSSProperties } from "react";
import FileChooserEntry from './FileChooserEntry';
import { AnimatePresence, motion, Variants } from "framer-motion";

export type BaseFile = {
    url: string,
    _id: string,
}

export type FileChooserBreakpoint = {
    breakpoint: number,
    perRow: number,
}

export interface FileChooserProps<T extends BaseFile> {
    files: T[],
    withSelectedAction: (selection: string[]) => void,
    actionText: string,
    initialSelectionMode?: boolean,
    initialSelection?: string[],
    responsive?: FileChooserBreakpoint[],
    style?: CSSProperties,
    onSelect?: (id: string) => void,
    onRemove?: (id: string) => void,
    disableActionButton?: boolean,
}

function FileChooser<T extends BaseFile>(props: FileChooserProps<T>): React.ReactElement<FileChooserProps<T>> {
    const { 
        files, 
        withSelectedAction, 
        actionText, 
        responsive, 
        style, 
        onSelect, 
        onRemove, 
        disableActionButton, 
        initialSelectionMode, 
        initialSelection,
    } = props;
    const [perRow, setPerRow] = useState<number | undefined>(undefined);
    const [selectionMode, setSelectionMode] = useState(initialSelectionMode || false);
    const [selectedFiles, setSelectedFiles] = useState<string[]>(initialSelection || []);
    let debounce: ReturnType<typeof setTimeout> | null = null;
    useEffect(() => {
        const resp = () => {
            clearTimeout(debounce);
            debounce = setTimeout(() => {
                if (responsive && responsive.length > 0) {
                    const w = window.innerWidth;
                    responsive.sort((a, b) => {
                        if (Math.abs(a.breakpoint - w) > Math.abs(b.breakpoint - w)) {
                            return 1;
                        } else return -1;
                    });
                    setPerRow(responsive[0].perRow);
                }
            }, 200);
        }
        resp();
        window.addEventListener('resize', resp);
        return () => {
            window.removeEventListener('resize', resp);
            clearTimeout(debounce);
        }
    }, []);
    const toggleSelection = () => setSelectionMode(s => !s);
    const delVariants: Variants = {
        initial: {
            y: '100%',
            opacity: 0,
        },
        animate: {
            y: '0%',
            opacity: 1,
            transition: {
                type: 'spring',
            },
        },
        exit: {
            y: '100%',
            opacity: 0,
        },
    };
    const action = () => {
        withSelectedAction(selectedFiles);
        setSelectedFiles([]);
    }
    const select = (id: string) => {
        setSelectedFiles(p => [...p, id]);
        onSelect && onSelect(id);
    }
    const remove = (id: string) => {
        setSelectedFiles(p => p.filter(el => el !== id));
        onRemove && onRemove(id);
    }
    return (
        <>
            <div className="fileChooserWrapper p-2" style={style}>
                <div className="file_ch">
                    {
                        files &&
                        files.map(f => (
                            <FileChooserEntry 
                                onSelect={select} 
                                onRemove={remove}
                                key={f._id} 
                                {...f} 
                                selectionMode={selectionMode}
                                initialSelect={selectedFiles.includes(f._id)}
                                onClick={toggleSelection}
                                perRow={perRow}
                            />
                        ))
                    }
                </div>
            </div>
            <div className="overflow-hidden d-flex w-100 justify-content-center align-items-center py-3">
                {
                    disableActionButton !== undefined && disableActionButton ?
                    null :
                    <AnimatePresence>
                        {
                            selectionMode && selectedFiles.length > 0 &&
                            <motion.button
                                type="button"
                                className="btn btn-lg btn-outline-danger"
                                onClick={action}
                                variants={delVariants}
                                initial="initial"
                                animate="animate"
                                exit="exit"
                            >
                                {actionText}
                            </motion.button>
                        }
                    </AnimatePresence>
                }
            </div>
>>>>>>> develop
        </>
    );
}

<<<<<<< HEAD
export default FileChooser;

=======
export default FileChooser;
>>>>>>> develop
